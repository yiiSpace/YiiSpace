<?php

/**
 * This is the template for generating the migration class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var \year\gii\element_plus\generators\form\Generator $generator
 * @var string $tableName full table name
 * @var \yii\db\TableSchema|false $tableSchema
 */

// FIXME: 关于表单默认值的问题 可以通过字段类型取到其默认值：https://github.com/php-toolkit/stdlib/blob/master/src/Type.php#L94
// 也可以用ActiveRecord 取到默认值：https://www.yiiframework.com/doc/guide/2.0/en/db-active-record#default-attribute-values

// TODO： 对TS 的支持
// todo: php 类型转换为typescript类型： spatie/typescript-transformer ｜https://typeschema.org/｜https://hybridly.dev/guide/typescript.html
// 万一用php库搞不定 还可以使用进程间通信 或者webdriver等手段通过无头浏览器让特定网站来完成转换

$genProp = function ($propName, $propType) {
  $propName = '$' . $propName;
  $propCode = <<<Code
  /**
   * @var $propType
   */
  public {$propName};
  Code;
  return  $propCode;
};

?>

<script  lang="jsx" setup>
import { reactive, ref, toRefs, nextTick } from 'vue'
import dayjs from 'dayjs'

// @see https://blog.csdn.net/weixin_45291937/article/details/125523244
// ⚠️ v-bind 可以透传绑定属性到底层或者slot组件 一股脑全传过去

// @see https://blog.csdn.net/outsider76557/article/details/128933974

// @see https://gitee.com/zhfyjeremy/vue3-vite-ts-template/tree/master/src/components

// import {
//   ElButton,
//   ElIcon,
//   ElTag,
//   ElTooltip,
//   TableV2FixedDir,
// } from 'element-plus'
import { Timer } from '@element-plus/icons-vue'
// import { MyTableColumn } from './components/TableColumn.vue'
import DetailTable from './components/DetailTable.vue'


/**
 * ## 可以参考Yii的DetailView Widget设计方法
 * TODO：formate的支持 ，yii实现中需要系统formatter的引入
 * - "some_field:date" date是系统formatter的一种 表示使用date做格式化处理
 * 
 *        <template v-else-if="col.type === 'date'">
 *               <!---十位数时间戳-->
  *              <span v-if="String(row[col.prop!])?.length <= 10">
   *                 {{ dayjs.unix(row[col.prop!]).format(col.dateFormat ?? 'YYYY-MM-DD') }}
    *            </span>
     *           <!---十三位数时间戳-->
      *          <span v-else>{{ dayjs(row[col.prop!]).format(col.dateFormat ?? 'YYYY-MM-DD') }}</span>
       *     </template>
*
   *   
   * - v-bind 对于`attribute` 样式方面的控制 可以使用v-bind绑定到组件上去      
 */
const attributes = ref([
    <?php
    foreach ($tableSchema->columns as $column) {
        $format = $generator->generateColumnFormat($column);
        echo "           {\n prop: '" . $column->name . ($format === 'text' ? "" : ":" . $format) . "',\n";
        echo "           lable: '". $labels[$column->name ]. "' \n},\n";
    }
    ?>
   // ------------     👇下面测试用   --------------- 
  {
    prop: '___tag',
    label: 'slot 测试🤯',
    slot: 'my_slot',
  },
  {
    prop: "date",
    // width: "140",
    align: "left",
    label: "常规名称长字段",
    render: ({ row, index }) => {
      return <ElTag>{row.value}</ElTag>;
    },
  },
  {
    prop: "date",
    // width: "140",
    align: "left",
    label: "常规名称长字段",
    // TODO: 缺少常见格式化处理
    dateFormat: 'YYYY-MM-DD',
    formate: ({ row, index }) => {
      /**
       * dayjs.unix(row.date).format(this.dateFormat ?? 'YYYY-MM-DD')
       */
      return <ElTag>{row.value}</ElTag>;
    },
  },

]);


// props 默认是响应式的 
const props = defineProps({
  title: String,
  detailMode: {
    type: String,
    default: 'dialog', // dailog|drawer
  },
})

const detailViewer = () => {
  if (props.detailMode == 'dialog') {
    return 'el-dialog'
  }
  return 'el-drawer'
}

const dialogVisible = ref(false)
const model = ref()
const openDialog = (row) => {
  dialogVisible.value = true

  if (row) {
    nextTick(() => {

      model.value = row

    })
  }

}

// 导出方法
defineExpose({
  openDialog,
})

const handleBeforeClose = (done) => {
  done()
}
const handleClose = () => {
}
const handleCancel = (formEl) => {
  dialogVisible.value = false // 视图层赋值不需要.value!😺
}
const detailTableRef = ref()

</script>

<template>
  <keep-alive>
    <component :is="detailViewer()" size="65%" v-model="dialogVisible" :title="props.title + props.detailMode"
      @close="handleClose" :before-close="handleBeforeClose">
     
      <DetailTable ref="detailTableRef" :attributes="attributes" :model="model">
        <template #my_slot="{ row, index }">
          hiiiiii
          {{ index }}
        </template>
      </DetailTable>

      <template #footer>
        <span class="dialog-footer">
          <el-button @click="handleCancel(formRef)">Cancel</el-button>
        </span>
      </template>

    </component>
  </keep-alive>

</template>
  
 
<style scoped>
.dialog-footer button:first-child {
  margin-right: 10px;
}
</style>
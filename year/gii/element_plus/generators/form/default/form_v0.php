<?php

/**
 * This is the template for generating the migration class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var \year\gii\element_plus\generators\form\Generator $generator
 * @var string $tableName full table name
 */

// FIXME: 关于表单默认值的问题 可以通过字段类型取到其默认值：https://github.com/php-toolkit/stdlib/blob/master/src/Type.php#L94
// 也可以用ActiveRecord 取到默认值：https://www.yiiframework.com/doc/guide/2.0/en/db-active-record#default-attribute-values

// TODO： 对TS 的支持
// todo: php 类型转换为typescript类型： spatie/typescript-transformer ｜https://typeschema.org/｜https://hybridly.dev/guide/typescript.html
// 万一用php库搞不定 还可以使用进程间通信 或者webdriver等手段通过无头浏览器让特定网站来完成转换

$genProp = function ($propName, $propType) {
  $propName = '$' . $propName;
  $propCode = <<<Code
  /**
   * @var $propType
   */
  public {$propName};
  Code;
  return  $propCode;
};

?>
<template>
  <!-- /** generate for table:  <?= $generator->tableName ?> | class: <?= $className ?> */ -->

  <el-form ref="ruleFormRef" :model="ruleForm" :rules="rules" label-width="120px" class="demo-ruleForm" :size="formSize" status-icon>
    <?php 
    $propsCode = [] ;
    foreach ($properties as $property => $data) : ?>
      <el-form-item label="<?= $labels[$property] ?>" prop="<?= $property ?>">
        <?= $generator->generateFormItemField($tableName, $property) ?>
        <?php
         // print_r($data, false);
        $propsCode[] = $genProp($data['name'],$data['type']);
        ?>
      </el-form-item>
    <?php endforeach; ?>

    <el-form-item>
      <el-button type="primary" @click="submitForm(ruleFormRef)">
        Create
      </el-button>
      <el-button @click="resetForm(ruleFormRef)">Reset</el-button>
    </el-form-item>
  </el-form>
</template>
<!-- <script lang="ts" setup> -->
<?php
$classCode = "
<?php
/**
* @TypeScriptMe
*/
class $className
{\r\n " . implode("\r\n",$propsCode)."\r\n}";

// echo $classCode ;
// \year\gii\common\utils\TsParser::run($classCode);
?>
<script setup>
  import {reactive,ref} from 'vue'
  // import type { FormInstance, FormRules } from 'element-plus'
  /*
  interface RuleForm {
    name: string
   ...
  }
  <?php \year\gii\common\utils\TsParser::run($classCode); ?>
  */
    <?php 
     // print_r($defaults,  true) ;  json_encode($defaults); 
      \yii\helpers\Json::$prettyPrint = true;
      // echo \yii\helpers\Json::encode($defaults) 
      // var datac = JSON.parse(data);
      ?>
  const formSize = ref('default')
  // const ruleFormRef = ref<FormInstance>()
  const ruleFormRef = ref()
  // const ruleForm = reactive<RuleForm>({
  const ruleForm = reactive(
    <?= \yii\helpers\Json::encode($defaults) ?>
  )
  // const rules = reactive<FormRules<RuleForm>>({
  const rules = reactive(
    <?= \yii\helpers\Json::encode($rules) ?>
  )
  // const submitForm = async (formEl: FormInstance | undefined) => {
  const submitForm = async (formEl) => {
    if (!formEl) return
    await formEl.validate((valid, fields) => {
      if (valid) {
        console.log('submit!')
      } else {
        console.log('error submit!', fields)
      }
    })
  }
  // const resetForm = (formEl: FormInstance | undefined) => {
  const resetForm = (formEl) => {
    if (!formEl) return
    formEl.resetFields()
  }
  const options = Array.from({
    length: 10000
  }).map((_, idx) => ({
    value: `${idx + 1}`,
    label: `${idx + 1}`,
  }))
</script>

<?php
// \year\gii\common\utils\TsParser::run();
?>
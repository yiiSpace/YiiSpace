<?php
/**
 * This is the template for generating the migration class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var \year\gii\models\generators\gomodel\Generator $generator
 * @var string $tableName full table name
 */

//   $generator->tableName
$goColumnsMeta = columnsMetaData($giiConsolePath) ;

$packageName = 'mysql';
$imports = [] ;

$daoClassName = $className.'DAO' ;

?>

<?php



?>

package <?= $packageName ?>

import (
	"github.com/qiangxue/golang-restful-starter-kit/app"
	"github.com/qiangxue/golang-restful-starter-kit/models"
)

// <?= $daoClassName ?> persists <?= $tableName ?> data in database
type <?= $daoClassName ?> struct{}

// New<?= $daoClassName ?> creates a new <?= $daoClassName ,"\n"?>
func New<?= $daoClassName ?>() *<?= $daoClassName?> {
	return &<?= $daoClassName ?>{}
}

// Get reads the artist with the specified ID from the database.
func (dao *<?= $daoClassName ?>) Get(rs app.RequestScope, id int) (*models.Artist, error) {
	var artist models.Artist
	err := rs.Tx().Select().Model(id, &artist)
	return &artist, err
}

// Create saves a new artist record in the database.
// The Artist.Id field will be populated with an automatically generated ID upon successful saving.
func (dao *<?= $daoClassName ?>) Create(rs app.RequestScope, artist *models.Artist) error {
	artist.Id = 0
	return rs.Tx().Model(artist).Insert()
}

// Update saves the changes to an artist in the database.
func (dao *<?= $daoClassName ?>) Update(rs app.RequestScope, id int, artist *models.Artist) error {
	if _, err := dao.Get(rs, id); err != nil {
		return err
	}
	artist.Id = id
	return rs.Tx().Model(artist).Exclude("Id").Update()
}

// Delete deletes an artist with the specified ID from the database.
func (dao *<?= $daoClassName ?>) Delete(rs app.RequestScope, id int) error {
	artist, err := dao.Get(rs, id)
	if err != nil {
		return err
	}
	return rs.Tx().Model(artist).Delete()
}

// Count returns the number of the artist records in the database.
func (dao *<?= $daoClassName ?>) Count(rs app.RequestScope) (int, error) {
	var count int
	err := rs.Tx().Select("COUNT(*)").From("artist").Row(&count)
	return count, err
}

// Query retrieves the artist records with the specified offset and limit from the database.
func (dao *<?= $daoClassName ?>) Query(rs app.RequestScope, offset, limit int) ([]models.Artist, error) {
	artists := []models.Artist{}
	err := rs.Tx().Select().OrderBy("id").Offset(int64(offset)).Limit(int64(limit)).All(&artists)
	return artists, err
}

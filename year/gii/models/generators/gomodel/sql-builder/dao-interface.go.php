<?php
/**
 * This is the template for generating the migration class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 */

use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/**
 * @var yii\web\View $this
 * @var \year\gii\models\generators\gomodel\Generator $generator
 * @var string $tableName full table name
 */

//   $generator->tableName
$goColumnsMeta = columnsMetaData($giiConsolePath) ;

$packageName = 'mysql';
$imports = [] ;

$daoClassName = $className.'DAO' ;
$shortModelName = '';
foreach (explode('_',$tableName) as $idx=>$part){
    $shortModelName .= $part[0] ;
}

?>

<?php



?>

package <?= $packageName ?>

// short model name is : <?= $shortModelName ?>

import (
	// "github.com/qiangxue/golang-restful-starter-kit/app"
	// "github.com/qiangxue/golang-restful-starter-kit/models"
)

// <?= $daoClassName ?> persists <?= $tableName ?> data in database
type <?= $daoClassName ?> struct{}

// New<?= $daoClassName ?> creates a new <?= $daoClassName ,"\n"?>
func New<?= $daoClassName ?>() *<?= $daoClassName?> {
	return &<?= $daoClassName ?>{}
}

// Get reads the <?= $tableName ?> with the specified ID from the database.
func (dao *<?= $daoClassName ?>) Get(id int) (*models.<?= $className ?>, error) {
	var <?= $tableName ?> models.<?= $className ?>
	// err := rs.Tx().Select().Model(id, &<?= $tableName ?>)
	return &<?= $tableName ?>, nil
}

// Create saves a new <?= $tableName ?> record in the database.
// The <?= $className ?>.Id field will be populated with an automatically generated ID upon successful saving.
func (dao *<?= $daoClassName ?>) Create(<?= $tableName ?> *models.<?= $className ?>) error {
	<?= $tableName ?>.Id = 0
	return rs.Tx().Model(<?= $tableName ?>).Insert()
}

// Update saves the changes to an <?= $tableName ?> in the database.
func (dao *<?= $daoClassName ?>) Update(rs app.RequestScope, id int, <?= $tableName ?> *models.<?= $className ?>) error {
	if _, err := dao.Get(rs, id); err != nil {
		return err
	}
	<?= $tableName ?>.Id = id
	return rs.Tx().Model(<?= $tableName ?>).Exclude("Id").Update()
}

// Delete deletes an <?= $tableName ?> with the specified ID from the database.
func (dao *<?= $daoClassName ?>) Delete( id int ) error {
	model, err := dao.Get(rs, id)
	if err != nil {
		return err
	}
<!--	return rs.Tx().Model(--><?//= $tableName ?><!--).Delete()-->
	return nil
}

// Count returns the number of the <?= $tableName ?> records in the database.
func (dao *<?= $daoClassName ?>) Count(rs app.RequestScope) (int, error) {
	var count int
	// err := rs.Tx().Select("COUNT(*)").From("<?= $tableName ?>").Row(&count)
	return count, nil
}

// Query retrieves the <?= $tableName ?> records with the specified offset and limit from the database.
func (dao *<?= $daoClassName ?>) Query(/*qm queryModel*/ offset, limit int) ([]models.<?= $className ?>, error) {
	models := []models.<?= $className ?>{}
	// err := rs.Tx().Select().OrderBy("id").Offset(int64(offset)).Limit(int64(limit)).All(&models)

	return models, nil
}
